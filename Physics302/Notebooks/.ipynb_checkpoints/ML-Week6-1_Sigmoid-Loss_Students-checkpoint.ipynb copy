{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Topics\n",
    "\n",
    "## 1. Implementing the Sigmoid Activation Function\n",
    "## 2. The \"error\" as the Loss Function\n",
    "\n",
    "## Lab: Homeowork 1 and Github Classroom\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# All imports\n",
    "from random import choice\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"Step Function\"\n",
    "\n",
    "step_fun = lambda x: x > 0 \n",
    "# x = np.array([-1, 1])\n",
    "# step_fun(x)\n",
    "x = np.linspace(-10, 10, 100)\n",
    "z = step_fun(x)\n",
    "plt.plot(x, z)\n",
    "plt.ylim(-.1, 1.1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let's turn this into a classifier!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "'''\n",
    "\n",
    "Perceptron to implement the NOR operation\n",
    "\n",
    "This version ensures training is only done once, achieving perfect boundary and of course faster speed\n",
    "\n",
    "\n",
    "'''\n",
    "def training(training_data, show_train = False):\n",
    "    # usu. random numbers for weights is not a bad starting point\n",
    "    w = np.random.rand(3)\n",
    "    errors = []\n",
    "\n",
    "    # \"learning rate\"\n",
    "    alfa = 0.2\n",
    "\n",
    "    # use 100 training steps\n",
    "    n = 100\n",
    "    # w.history = []\n",
    "    for i in range(n):\n",
    "        x_train, target = choice(training_data)\n",
    "        y = np.dot(w, x_train)\n",
    "        error = target - step_fun(y)\n",
    "        errors.append(error)\n",
    "        w += alfa * error * x_train\n",
    "\n",
    "    if show_train:\n",
    "        print('weights:', w)\n",
    "        print('Training results:')\n",
    "        for x_train, _ in training_data:\n",
    "            y = np.dot(x_train, w)\n",
    "            print(\"{}: {} -> {}\".format(x_train[:2], y, step_fun(y)))\n",
    "\n",
    "    return w\n",
    "\n",
    "def NOR_perceptron_classifier(x, w_trained = [], show_train = False):    \n",
    "    training_data = [\n",
    "        (np.array([0,0,1]), 1),\n",
    "        (np.array([0,1,1]), 0),\n",
    "        (np.array([1,0,1]), 0),\n",
    "        (np.array([1,1,1]), 0),\n",
    "    ]\n",
    "\n",
    "    if len(w_trained) == 0:\n",
    "        w_trained = training(training_data, show_train = show_train)\n",
    "    \n",
    "    x = np.append(x, 1)\n",
    "    return step_fun(np.dot(x, w_trained)), w_trained\n",
    "\n",
    "x_arr = np.random.rand(1000, 2)\n",
    "\n",
    "z_arr = np.array([])\n",
    "for i, x in enumerate(x_arr):\n",
    "    if i == 0:\n",
    "        z, w_trained = NOR_perceptron_classifier(x)\n",
    "    else:\n",
    "        z, _ = NOR_perceptron_classifier(x, w_trained = w_trained)\n",
    "    z_arr = np.append(z_arr, z)\n",
    "\n",
    "for i, x in enumerate(x_arr):\n",
    "    if z_arr[i]:\n",
    "        plt.plot(x[0], x[1], 'r.')\n",
    "    else:\n",
    "        plt.plot(x[0], x[1], 'b.')\n",
    "\n",
    "x0 = np.array([0, 1])\n",
    "\n",
    "x1 = x0 * (-w_trained[0] / w_trained[1]) - w_trained[2] / w_trained[1]\n",
    "plt.plot(x0, x1, 'g-')\n",
    "plt.axis([-0.1, 1.1, -0.1, 1.1])\n",
    "x_train = [np.array([0, 0, 1, 1]), np.array([0,1,0,1])]\n",
    "plt.plot([0, 1, 1], [1, 0, 1], 'bo', ms = 10)\n",
    "plt.plot([0,], [0,], 'ro', ms = 10)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "'''\n",
    "Sigmoid function\n",
    "'''\n",
    "\n",
    "y = np.linspace(-10, 10, 100)\n",
    "S = 1 / (1 + np.e ** (-y))\n",
    "plt.plot(y, S)\n",
    "plt.title('The Sigmoid (Logistic) Function')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Breakout Exercise:\n",
    "\n",
    "## Implement the NOR classifier using the Sigmoid function, instead of the step function\n",
    "\n",
    "## Preliminary Steps:\n",
    "\n",
    "### 1. Write a sigmoid function\n",
    "### 2. Write a function that caclculates the derivative of the sigmoid function (remeember it's easier to do it using z, the output -- see lab exercise for Week 5-1 for the tahn function)\n",
    "\n",
    "\n",
    "## In addition:\n",
    "\n",
    "## 3. Rewrite the classifier function, such that it has the following call signature\n",
    "\n",
    "     perceptron_classifier(x, N=1000, alfa=0.2, show_train=False, w_trained=[], training_data=[])\n",
    " \n",
    "## 4. After the training is done, plot the error^2 vs. training steps.\n",
    "\n",
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lab \n",
    "\n",
    "## 1. Additoinal thoughts on homework 1 (bounds, maximum iterations)\n",
    "## 2. Github Classroom"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# End of Week 6-1"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
